"""
STATUSES: not started, cooking, cooked, finished

BUENO HTTP POST /

```
    order: [
        {
            dish: string
            quantity: number
        }, ...
    ]
```

RESPONSE:

```
    {
        id: string,  // generated by restaurant
        status: string
    }
```

WEBHOOK HTTP POST <SELECT>

```
    {
        id: string,
        status: string
    }
```

=================================================================

STATUS: not started, cooking, cooked, finished

MELANGE HTTP POST /api/orders

```
    order: [
        {
            dish: string
            quantity: number
        }, ...
    ]
```

```
    {
        id: string,
        status: string
    }
```

MELANGE HTTP GET /api/orders/<ID>

```
    {
        status: string
    }
```
"""

from collections import defaultdict
from datetime import datetime, date, time
import json
from time import sleep
import uuid
import httpx
from celery import shared_task
from .models import Restaurant, Order, DishOrderItem
from .enums import Restaurant
from config import celery_app
from .models import ExternalOrder


@celery_app.task
def melange_order_processing(order_id: int):
    try:
        external_order = ExternalOrder.objects.get(order_id=order_id, provider=Restaurant.MELANGE)

        while external_order.status != "finished":
            response = httpx.get(f"http://localhost:8001/api/orders/{external_order.external_id}")
            response.raise_for_status()

            new_status = response.json()["status"]
            print(f"MELANGE STATUS: {new_status}")
            external_order.status = new_status
            external_order.save()

            if new_status == "cooking":
                sleep(3)
            elif new_status == "not_started":
                sleep(1)
            elif new_status == "cooked":
                print("ðŸšš Delivery service should be called here")
                sleep(1)
            else:
                raise ValueError(f"{new_status} is not supported")

    except ExternalOrder.DoesNotExist:
        print("Melange order not found in the database.")


def bueno_order_processing(order_id: int):
    print("BUENO===============================")
    print(order_id)
    print("BUENO===============================")


@shared_task
def _schedule_order(order_id: int):
    """Start processing restaurants orders using database instead of cache."""
    melange_payload = []
    bueno_payload = []

    order = Order.objects.get(id=order_id)

    for item in order.items.all():
        restaurant = item.dish.restaurant.name.lower()

        dish_payload = {
            "dish": item.dish.name,
            "quantity": item.quantity
        }

        if restaurant == Restaurant.MELANGE:
            melange_payload.append(dish_payload)
        elif restaurant == Restaurant.BUENO:
            bueno_payload.append(dish_payload)
        else:
            raise ValueError(f"Cannot process items from unknown restaurant: {restaurant}")

    # === MELANGE ===
    if melange_payload:
        response = httpx.post("http://localhost:8001/api/orders", json={"order": melange_payload})
        response.raise_for_status()
        melange_data = response.json()

        print("Creating ExternalOrder...", melange_data["id"])
        ExternalOrder.objects.create(
            provider=Restaurant.MELANGE,
            external_id=melange_data["id"],
            status=melange_data["status"],
            order=order
        )
        print("ExternalOrder created!")


def schedule_order(order_id: int):
    _schedule_order.delay(order_id)

    order = Order.objects.get(id=order_id)
    if order.eta == date.today():
        print("The order will be started processing now")
        melange_order_processing.delay(order.id)
    else:
        eta_time = datetime.combine(order.eta, time(hour=3))
        print(f"The order will be processed at: {eta_time}")
        melange_order_processing.apply_async(args=[order.id], eta=eta_time)
